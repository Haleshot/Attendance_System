# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'F:\New_Laptop_Documents\NMIMS_College_Docs\2nd_Year\1st_Semester\IS-1\Project_Materials\Final_Project_Files\Attendance_System.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


# import libraries needed for the project

from cgitb import text
from sqlite3 import Date # To display respective Date for Attendance log
from xmlrpc.client import DateTime # To display respective Date and Time for Attendance log

# Important Libraries of PyQt5 to integrate in Python; for the layout of the GUI.
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication
from PyQt5.QtWidgets import QLabel  
from PyQt5.QtWidgets import QWidget  
from PyQt5.QtCore import QCoreApplication, QRect
from PyQt5.QtWidgets import * 


from PIL import Image # For 
import pandas as pd # Reading of CSV File.
import datetime # To display respective Date and Time for Attendance log.
import time
import os # Used for finding the existence of a certain file in a particular directory.
import csv # CSV File access (Various operations done using this - read, write, etc).
import cv2 # OpenCV Library used for Face Recognition implementation in the Project.
import numpy as np # Used for converting the PIL image into numpy array and extracting infoormation from it.
import sys # Used for the execution of the program on the whoe. (GUI + Logic implementation in the project).

# Declaring a Column Counter for the Table View Widget in the GUI Window
column_counter = 1


# The Canvas/ Background Widget of the whole project which contains Buttons, Text Boxes, Table View, etc.
# It forms the GUI Layout as seen in the Output Window popup.
class Ui_bgWidget(object):
    def setupUi(self, bgWidget):
        bgWidget.setObjectName("bgWidget")
        bgWidget.resize(1200, 800)
        font = QtGui.QFont()
        font.setPointSize(20)
        bgWidget.setFont(font)
        self.centralwidget = QtWidgets.QWidget(bgWidget)
        self.centralwidget.setObjectName("centralwidget")
        self.Enter_ID = QtWidgets.QTextEdit(self.centralwidget)
        self.Enter_ID.setGeometry(QtCore.QRect(750, 180, 271, 61))
        self.Enter_ID.setStyleSheet("border: 12px  solid rgb(0, 0, 0);\n"
"border-width: 2px;\n"
"font: 12pt \"MS Shell Dlg 2\";\n"
"border-radius: 15px;\n"
"padding-left:20px;\n"
"padding-right:20px;")
        self.Enter_ID.setObjectName("Enter_ID")
        self.New_Registrations = QtWidgets.QLabel(self.centralwidget)
        self.New_Registrations.setGeometry(QtCore.QRect(750, 110, 261, 61))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.New_Registrations.setFont(font)
        self.New_Registrations.setAlignment(QtCore.Qt.AlignCenter)
        self.New_Registrations.setObjectName("New_Registrations")
        self.Enter_Name = QtWidgets.QTextEdit(self.centralwidget)
        self.Enter_Name.setGeometry(QtCore.QRect(750, 360, 271, 61))
        self.Enter_Name.setStyleSheet("border: 12px  solid rgb(0, 0, 0);\n"
"border-width: 2px;\n"
"font: 12pt \"MS Shell Dlg 2\";\n"
"border-radius: 15px;\n"
"padding-left:20px;\n"
"padding-right:20px;")
        self.Enter_Name.setObjectName("Enter_Name")
        self.Generate_Images = QtWidgets.QPushButton(self.centralwidget)
        self.Generate_Images.setGeometry(QtCore.QRect(750, 480, 271, 71))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.Generate_Images.setFont(font)
        self.Generate_Images.setStyleSheet("background-color: rgb(85, 255, 255);")
        self.Generate_Images.setObjectName("Generate_Images")
        self.Save_Profile = QtWidgets.QPushButton(self.centralwidget)
        self.Save_Profile.setGeometry(QtCore.QRect(750, 580, 271, 71))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.Save_Profile.setFont(font)
        self.Save_Profile.setStyleSheet("background-color: rgb(0, 255, 127);")
        self.Save_Profile.setObjectName("Save_Profile")
        self.Current_Users = QtWidgets.QLabel(self.centralwidget)
        self.Current_Users.setGeometry(QtCore.QRect(80, 10, 211, 61))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.Current_Users.setFont(font)
        self.Current_Users.setAlignment(QtCore.Qt.AlignCenter)
        self.Current_Users.setObjectName("Current_Users")
        self.Attendance = QtWidgets.QLabel(self.centralwidget)
        self.Attendance.setGeometry(QtCore.QRect(40, 160, 261, 61))
        self.Attendance.setObjectName("Attendance")

        self.Date_Time_Log = QtWidgets.QLabel(self.centralwidget)
        self.Date_Time_Log.setGeometry(QtCore.QRect(750, 10, 400, 61))
        self.Date_Time_Log.setObjectName("Date_Time_Log")

        self.Quit_Button = QtWidgets.QPushButton(self.centralwidget)
        self.Quit_Button.setGeometry(QtCore.QRect(90, 580, 271, 71))
        self.Quit_Button.setStyleSheet("background-color: rgb(255, 0, 4);")
        self.Quit_Button.setObjectName("Quit_Button")
        self.Register_Attendance = QtWidgets.QPushButton(self.centralwidget)
        self.Register_Attendance.setGeometry(QtCore.QRect(40, 80, 301, 61))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.Register_Attendance.setFont(font)
        self.Register_Attendance.setStyleSheet("background-color: rgb(0, 255, 127);")
        self.Register_Attendance.setObjectName("Register_Attendance")
        

        
        bgWidget.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(bgWidget)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1200, 51))
        self.menubar.setObjectName("menubar")
        bgWidget.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(bgWidget)
        self.statusbar.setObjectName("statusbar")
        bgWidget.setStatusBar(self.statusbar)
        self.Error_Message = QLabel(self.centralwidget)
        self.Error_Message.setObjectName(u"Error_Message")
        self.Error_Message.setGeometry(QRect(390, 690, 471, 41))
        self.Error_Message.setStyleSheet(u"color: rgb(255, 0, 0);")

        self.Attendance_Log = QTableWidget(self.centralwidget)
        self.Attendance_Log.setGeometry(QtCore.QRect(40, 220, 591, 341))
        self.Attendance_Log.setObjectName("Attendance_Log")

        

        #Row count
        self.Attendance_Log.setRowCount(100) # Setting a Row Count for Maximum users.
  
        #Column count
        self.Attendance_Log.setColumnCount(4)  # Setting a Column Count for the Table View Attendance Log.

        # Hiding the Row Numbers generated by Python while displaying the data in the Table format.
        self.Attendance_Log.verticalHeader().setVisible(False)  #Hiding the Row Count Numbers displayed on the side.


        self.retranslateUi(bgWidget)
        
        QtCore.QMetaObject.connectSlotsByName(bgWidget)







    def retranslateUi(self, bgWidget):
        # The Function provides specification for each widget created by the UI and assigns and a Label to each respectively.
        DateTime = datetime.datetime.now()
        _translate = QtCore.QCoreApplication.translate
        bgWidget.setWindowTitle(_translate("bgWidget", "MainWindow"))
        self.Enter_ID.setPlaceholderText(_translate("bgWidget", "Enter ID..."))
        self.New_Registrations.setText(_translate("bgWidget", "New Registrations"))
        self.Enter_Name.setPlaceholderText(_translate("bgWidget", "Enter Name..."))
        self.Generate_Images.setText(_translate("bgWidget", "Generate Images"))
        self.Save_Profile.setText(_translate("bgWidget", "Save Profile"))
        self.Current_Users.setText(_translate("bgWidget", "Current Users"))
        # This helps us is displaying the Current Date and Time at the time of execution of the GUI Window/ Project.
        self.Date_Time_Log.setText(_translate("bgWidget", "Time : %s/%s/%s, %s:%s:%s" % (DateTime.day, DateTime.month, DateTime.year, DateTime.hour, DateTime.minute, DateTime.second)))
        self.Attendance.setText(_translate("bgWidget", "Attendance :"))
        self.Quit_Button.setText(_translate("bgWidget", "Quit"))
        self.Register_Attendance.setText(_translate("bgWidget", "Register Attendance"))
        self.Error_Message.setText("")

        # Setting the Column Headings in the Table View Attendance Log.
        
        self.Attendance_Log.setItem(0,0, QTableWidgetItem("ID"))
        self.Attendance_Log.setItem(0,1, QTableWidgetItem("Name"))
        self.Attendance_Log.setItem(0,2, QTableWidgetItem("Date"))
        self.Attendance_Log.setItem(0,3, QTableWidgetItem("Time"))

        



        # Quitting the Application on Clicking the Quit Button on the GUI
        self.Quit_Button.clicked.connect(QCoreApplication.instance().quit)
        
        # Generating User Images on Clicking the Generate Images Button on the GUI
        self.Generate_Images.clicked.connect(self.TakeImages)

        # Checking if User Exists by Face Detection
        self.Save_Profile.clicked.connect(self.TrainImages)
        
        # Helps us in detecting a particular registered person by Facial Detection.
        # It refers to the Images in the Dataset -> TrainingImage folder.
        self.Register_Attendance.clicked.connect(self.TrackImages)


    # Function which helps in checking if a particular file exists or not.
    # If it doesn't, it creates the file in the Local Directory of execution of the Project.
    def assure_path_exists(self, path):
        dir = os.path.dirname(path)
        if not os.path.exists(dir):
            os.makedirs(dir)

    # Checks if the HaarCasacade Frontal Face Default file exists in the Local Directory as the Project File.
    # This File or the XML file contains a pre-trained model which was created through extensive training and research.
    def check_haarcascadefile(self):
        exists = os.path.isfile("haarcascade_frontalface_default.xml")
        if exists:
            pass
        else:
            QCoreApplication.instance().quit


    # This Function helps in fetching of Images from the Dataset -> TrainingImage Folder.
    # It then checks the Image and extracts information from it by converting the image into arrays and then extracting the data.
    def getImagesAndLabels(self, path):

        # Fetching the directory of all the data -> Images stored in the folder and storing it in the image_datas variable.
        image_datas = [os.path.join(path, f) for f in os.listdir(path)]

        # Initializing an Empty face list.
        faces = []

        # Initializing an Empty ID list.
        Ids = []

        # Iterating through all the Images in the Image Directory Dataset -> Training Images paths and loading the Ids and the images.
        for image_data in image_datas:
            # Extracting the Image and converting it to Gray scale.
            pilImage = Image.open(image_data).convert('L')

            # Converting the PIL image into Numpy array for easier handing of data from Image extracted above.
            imageNp = np.array(pilImage, 'uint8')

            # getting the Id from the image
            ID = int(os.path.split(image_data)[-1].split(".")[1])
            
            # extract the face from the training image sample
            faces.append(imageNp)
            Ids.append(ID)

        return faces, Ids # Returning the Faces and IDs extracted from the Images iterated in Dataset.

    # Function which Generates the Images of the user in front of the screen with the use of the device's webcam.
    def TakeImages(self):
        self.check_haarcascadefile()
        columns = ['SERIAL NO.', '', 'ID', '', 'NAME']
        self.assure_path_exists("StudentDetails/") # Checking if the File exists in the Local Directory.
        self.assure_path_exists("TrainingImage/")
        serial = 0
        exists = os.path.isfile("StudentDetails\StudentDetails.csv") # Checks whether File exists (True/ False).
        if exists:
            with open("StudentDetails\StudentDetails.csv", 'r') as csvFile1:
                reader1 = csv.reader(csvFile1)
                for l in reader1:
                    serial = serial + 1
            serial = (serial // 2)
            csvFile1.close()
        else:
            with open("StudentDetails\StudentDetails.csv", 'a+') as csvFile1:
                writer = csv.writer(csvFile1)
                writer.writerow(columns)
                serial = 1
            csvFile1.close()
        Id = self.Enter_ID.toPlainText() # Extracting the Value of the ID entered by the User in the GUI Window Text Box.
        name = self.Enter_Name.toPlainText() # Extracting the Value of the Name entered by the User in the GUI Window Text Box.

        if len(Id) == 0 or len(name) == 0:  # Checking whether the Value of the ID and Name entered by the User in the GUI Window Text Box is Empty or not.
            self.Error_Message.setText("Please Enter All Columns!") # Generating an Error Pop up Message in the GUI Window to alert the user.

        else:
            print(Id, name) # Displays the Name and ID Entered in the VS Terminal
            if ((name.isalpha()) or (' ' in name)):
                cam = cv2.VideoCapture(0) # Accessing the Webcam of the User's Device. The 0 is the default value for the in built webcam camera.
                harcascadePath = "haarcascade_frontalface_default.xml"
                detector = cv2.CascadeClassifier(harcascadePath)
                sampleNum = 0
                while (True):
                    ret, img = cam.read()
                    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                    faces = detector.detectMultiScale(gray, 1.3, 5)
                    for (x, y, w, h) in faces:
                        # Helps in locating the Person's Face with a given image and enclosing it in a rectangle with respect to the person's face width and height.
                        cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)

                        # Incrementing sample number
                        sampleNum = sampleNum + 1

                        # Storing the Captured Face in the dataset folder -> TrainingImage
                        cv2.imwrite("TrainingImage\ " + name + "." + str(serial) + "." + Id + '.' + str(sampleNum) + ".jpg",
                                    gray[y:y + h, x:x + w])

                        # Display the frame.
                        cv2.imshow('Taking Images', img)

                    # wait for 100 miliseconds or if the user presses the q button to close the camera window.
                    if cv2.waitKey(100) & 0xFF == ord('q'):
                        break

                    # Break if the sample number is more than 100.
                    elif sampleNum > 100:
                        break

                # Releasing the Windows and Camera Screen to shift to the GUI window.
                cam.release()
                cv2.destroyAllWindows()
                res = "Images Taken for ID : " + Id
                row = [serial, '', Id, '', name] # Appending the Data received in an array.
                with open('StudentDetails\StudentDetails.csv', 'a+') as csvFile:
                    writer = csv.writer(csvFile)
                    writer.writerow(row) # Writing the details onto the CSV File.
                csvFile.close()
            else:
                if (name.isalpha() == False):
                    res = "Enter Correct name"


    # This Function helps in training the Model with respect to the data in the dataset which contains the images of the user.
    def TrainImages(self):
        self.check_haarcascadefile() # Checking if the File exists in the Local Directory.
        self.assure_path_exists("TrainingImageLabel/") # Checking if the File exists in the Local Directory.
        recognizer = cv2.face_LBPHFaceRecognizer.create()
        harcascadePath = "haarcascade_frontalface_default.xml"
        detector = cv2.CascadeClassifier(harcascadePath)
        faces, ID = self.getImagesAndLabels("TrainingImage") # Accessing the details extracted from the Numpy array and feeding it to Train the Model.
        try:
            recognizer.train(faces, np.array(ID)) # Feeding the Images to the Model for easier recognition of the user.
        except:
            self.Error_Message.setText("Please Register First...") # If Person hasn't registered yet
            return
        recognizer.save("TrainingImageLabel\Trainner.yml")

        Id = self.Enter_ID.toPlainText() # Extracting the Value of the ID entered by the User in the GUI Window Text Box.
        name = self.Enter_Name.toPlainText() # Extracting the Value of the Name entered by the User in the GUI Window Text Box.
        
        if len(Id) == 0 or len(name) == 0: # Checking if the Text Boxes are Empty.
            self.Error_Message.setText("Please Enter All Columns!") # Generating an Error Pop up Message in the GUI Window to alert the user.
        else:
            self.Error_Message.setText("Profile Saved Successfully!") # Successfully Printing Training Status.


    # Function to Track/ Recognize the User based on the Input received by the user and Training provided to the Model.
    def TrackImages(self):
        global column_counter
        self.check_haarcascadefile() # Checking if the File exists in the Local Directory.
        self.assure_path_exists("Attendance/") # Checking if the File exists in the Local Directory.
        self.assure_path_exists("StudentDetails/") # Checking if the File exists in the Local Directory.
        i = 0
        j = 0

        # We train the Recognizer by feeding images from the dataset to the Model using Local Binary Patterns.
        recognizer = cv2.face.LBPHFaceRecognizer_create()  # cv2.createLBPHFaceRecognizer()

        exists3 = os.path.isfile("TrainingImageLabel\Trainner.yml")
         # Checks whether File exists (True/ False).
        if exists3:
            recognizer.read("TrainingImageLabel\Trainner.yml")
        else:
            self.Error_Message.setText("Please click on Save Profile to reset data...") # Generating an Pop up Message in the GUI Window to alert the user.
            return
        harcascadePath = "haarcascade_frontalface_default.xml"
        faceCascade = cv2.CascadeClassifier(harcascadePath)


        # Accessing the Webcam of the User.
        cam = cv2.VideoCapture(0)
        font = cv2.FONT_HERSHEY_SIMPLEX
        col_names = ['Id', '', 'Name', '', 'Date', '', 'Time']
        exists1 = os.path.isfile("StudentDetails\StudentDetails.csv") # Checking if the File exists in the Local Directory.
        if exists1:
            df = pd.read_csv("StudentDetails\StudentDetails.csv") # Reading the CSV File using Pandas.
        else:
            self.Error_Message.setText("Students details are missing, please check!...") # Generating an Error Pop up Message in the GUI Window to alert the user.
            cam.release()
            cv2.destroyAllWindows()
        while True:
            ret, im = cam.read()
            gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
            faces = faceCascade.detectMultiScale(gray, 1.2, 5)
            for (x, y, w, h) in faces:
                cv2.rectangle(im, (x, y), (x + w, y + h), (225, 0, 0), 2)
                serial, conf = recognizer.predict(gray[y:y + h, x:x + w])
                if (conf < 50): # Checking the Confidence Factor of the recognizer based on the confidence data reading returned.
                    ts = time.time()
                    date = datetime.datetime.fromtimestamp(ts).strftime('%d-%m-%Y')
                    timeStamp = datetime.datetime.fromtimestamp(ts).strftime('%H:%M:%S')
                    aa = df.loc[df['SERIAL NO.'] == serial]['NAME'].values
                    ID = df.loc[df['SERIAL NO.'] == serial]['ID'].values
                    ID = str(ID)
                    ID = ID[1:-1]
                    bb = str(aa)
                    bb = bb[2:-2]
                    attendance = [str(ID), '', bb, '', str(date), '', str(timeStamp)]

                else:
                    Id = 'Unknown' # Unknown Name as the Recognizer doesn't recognize the user based on input images fed to it.
                    bb = str(Id)
                cv2.putText(im, str(bb), (x, y + h), font, 1, (255, 255, 255), 2)
            cv2.imshow('Taking Attendance', im)
            if (cv2.waitKey(1) == ord('q')):
                break
        ts = time.time()
        date = datetime.datetime.fromtimestamp(ts).strftime('%d-%m-%Y')
        exists = os.path.isfile("Attendance\Attendance_" + date + ".csv")
        if exists:
            with open("Attendance\Attendance_" + date + ".csv", 'a+') as csvFile1:
                writer = csv.writer(csvFile1)
                writer.writerow(attendance) # Writing into the CSV File, the attendance list which contains bunch of values.
            csvFile1.close()
        else:
            with open("Attendance\Attendance_" + date + ".csv", 'a+') as csvFile1:
                writer = csv.writer(csvFile1)
                writer.writerow(col_names)
                writer.writerow(attendance)
            csvFile1.close()
        with open("Attendance\Attendance_" + date + ".csv", 'r') as csvFile1:
            reader1 = csv.reader(csvFile1)
            for lines in reader1:
                i = i + 1
                if (i > 1):
                    if (i % 2 != 0):
                        iidd = str(lines[0]) + '   '

                        # Inserting into the Table View Object (Attendance_Log), data about Attendance Log.
                        
                        if column_counter <= 100:
                            self.Attendance_Log.setItem(column_counter,0, QTableWidgetItem(str(lines[0]))) # ID
                            self.Attendance_Log.setItem(column_counter,1, QTableWidgetItem(str(lines[2]))) # Name
                            self.Attendance_Log.setItem(column_counter,2, QTableWidgetItem(str(lines[4]))) # Date
                            self.Attendance_Log.setItem(column_counter,3, QTableWidgetItem(str(lines[6]))) # Time
                            column_counter += 1
                            

        csvFile1.close()
        cam.release()
        cv2.destroyAllWindows()




# Main Code - Calling the GUI Window to execute.
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    bgWidget = QtWidgets.QMainWindow()
    ui = Ui_bgWidget()
    ui.setupUi(bgWidget)
    bgWidget.show()
    sys.exit(app.exec_())
